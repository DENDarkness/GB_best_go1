package loggerDebugWrap

// Code generated by gowrap. DO NOT EDIT.
// template: ../../template/zap
// gowrap: http://github.com/hexdigest/gowrap

//go:generate gowrap gen -p lesson1/internal/crawler -i Crawler -t ../../template/zap -o loggerCrawlerZapWrap.go -l ""

import (
	"context"
	"lesson1/internal/crawler"

	"go.uber.org/zap"
)

type loggerCrawlerWrap struct {
	logger *zap.SugaredLogger
	base   crawler.Crawler
}

func NewloggerCrawlerWrap(base crawler.Crawler, log *zap.SugaredLogger) loggerCrawlerWrap {
	return loggerCrawlerWrap{
		base:   base,
		logger: log,
	}
}

func (d loggerCrawlerWrap) AddDepth() {
	d.logger.Debug("Call crawler.Crawler -> AddDepth() ()")
	d.base.AddDepth()

}

func (d loggerCrawlerWrap) ChanResult() (ch1 <-chan crawler.CrawlResult) {
	d.logger.Debug("Call crawler.Crawler -> ChanResult() (ch1 <-chan crawler.CrawlResult)")
	res := d.base.ChanResult()
	d.logger.Debugf("Result ChanResult: %v", res)
	return res
}

func (d loggerCrawlerWrap) Scan(ctx context.Context, url string, inc int64) {
	d.logger.Debug("Call crawler.Crawler -> Scan(ctx context.Context, url string, inc int64) ()")
	d.base.Scan(ctx, url, inc)

}
